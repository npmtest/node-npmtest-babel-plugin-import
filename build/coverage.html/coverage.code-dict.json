{"/home/travis/build/npmtest/node-npmtest-babel-plugin-import/test.js":"/* istanbul instrument in package npmtest_babel_plugin_import */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-plugin-import/lib.npmtest_babel_plugin_import.js":"/* istanbul instrument in package npmtest_babel_plugin_import */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_babel_plugin_import = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_babel_plugin_import = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-plugin-import/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-babel-plugin-import && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_babel_plugin_import */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_babel_plugin_import\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_babel_plugin_import.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_babel_plugin_import.rollup.js'] =\n            local.assetsDict['/assets.npmtest_babel_plugin_import.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_babel_plugin_import.__dirname + '/lib.npmtest_babel_plugin_import.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-plugin-import/node_modules/babel-plugin-import/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (_ref) {\n  var types = _ref.types;\n\n  var plugins = null;\n\n  // Only for test\n  global.__clearBabelAntdPlugin = function () {\n    plugins = null;\n  };\n\n  function applyInstance(method, args, context) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var plugin = _step.value;\n\n        if (plugin[method]) {\n          plugin[method].apply(plugin, [].concat(_toConsumableArray(args), [context]));\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  function Program(path, _ref2) {\n    var opts = _ref2.opts;\n\n    // Init plugin instances once.\n    if (!plugins) {\n      if (Array.isArray(opts)) {\n        plugins = opts.map(function (_ref3) {\n          var libraryName = _ref3.libraryName,\n              libraryDirectory = _ref3.libraryDirectory,\n              style = _ref3.style,\n              camel2DashComponentName = _ref3.camel2DashComponentName,\n              camel2UnderlineComponentName = _ref3.camel2UnderlineComponentName;\n\n          (0, _assert2.default)(libraryName, 'libraryName should be provided');\n          return new _Plugin2.default(libraryName, libraryDirectory, style, camel2DashComponentName, camel2UnderlineComponentName, types);\n        });\n      } else {\n        opts = opts || {};\n        (0, _assert2.default)(opts.libraryName, 'libraryName should be provided');\n        plugins = [new _Plugin2.default(opts.libraryName, opts.libraryDirectory, opts.style, opts.camel2DashComponentName, opts.camel2UnderlineComponentName, types)];\n      }\n    }\n    applyInstance('Program', arguments, this);\n  }\n\n  var methods = ['ImportDeclaration', 'CallExpression', 'MemberExpression', 'Property', 'VariableDeclarator', 'LogicalExpression', 'ConditionalExpression', 'IfStatement', 'ExpressionStatement', 'ExportDefaultDeclaration'];\n\n  var ret = {\n    visitor: { Program: Program }\n  };\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var method = _step2.value;\n\n      ret.visitor[method] = function () {\n        applyInstance(method, arguments, ret.visitor);\n      };\n    };\n\n    for (var _iterator2 = methods[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      _loop();\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return ret;\n};\n\nvar _assert = require('assert');\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nvar _Plugin = require('./Plugin');\n\nvar _Plugin2 = _interopRequireDefault(_Plugin);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-babel-plugin-import/node_modules/babel-plugin-import/lib/Plugin.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _path = require('path');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Plugin = function () {\n  function Plugin(libraryName, libraryDirectory, style, camel2DashComponentName, camel2UnderlineComponentName, types) {\n    _classCallCheck(this, Plugin);\n\n    this.specified = null;\n    this.libraryObjs = null;\n    this.selectedMethods = null;\n    this.libraryName = libraryName;\n    this.libraryDirectory = typeof libraryDirectory === 'undefined' ? 'lib' : libraryDirectory;\n    this.camel2DashComponentName = typeof camel2DashComponentName === 'undefined' ? true : camel2DashComponentName;\n    this.camel2UnderlineComponentName = camel2UnderlineComponentName;\n    this.style = style || false;\n    this.types = types;\n  }\n\n  _createClass(Plugin, [{\n    key: 'importMethod',\n    value: function importMethod(methodName, file, opts) {\n      if (!this.selectedMethods[methodName]) {\n        var libraryDirectory = this.libraryDirectory;\n        var style = this.style;\n        var transformedMethodName = this.camel2UnderlineComponentName ? camel2Underline(methodName) : this.camel2DashComponentName ? camel2Dash(methodName) : methodName;\n        var path = winPath((0, _path.join)(this.libraryName, libraryDirectory, transformedMethodName));\n        this.selectedMethods[methodName] = file.addImport(path, 'default');\n        if (style === true) {\n          file.addImport(path + '/style', 'style');\n        } else if (style === 'css') {\n          file.addImport(path + '/style/css', 'style');\n        }\n      }\n      return this.selectedMethods[methodName];\n    }\n  }, {\n    key: 'buildExpressionHandler',\n    value: function buildExpressionHandler(node, props, path, opts) {\n      var _this = this;\n\n      var file = path.hub.file;\n\n      var types = this.types;\n      props.forEach(function (prop) {\n        if (!types.isIdentifier(node[prop])) return;\n        if (_this.specified[node[prop].name]) {\n          node[prop] = _this.importMethod(node[prop].name, file, opts);\n        }\n      });\n    }\n  }, {\n    key: 'buildDeclaratorHandler',\n    value: function buildDeclaratorHandler(node, prop, path, opts) {\n      var file = path.hub.file;\n\n      var types = this.types;\n      if (!types.isIdentifier(node[prop])) return;\n      if (this.specified[node[prop].name]) {\n        node[prop] = this.importMethod(node[prop].name, file, opts);\n      }\n    }\n  }, {\n    key: 'Program',\n    value: function Program() {\n      this.specified = Object.create(null);\n      this.libraryObjs = Object.create(null);\n      this.selectedMethods = Object.create(null);\n    }\n  }, {\n    key: 'ImportDeclaration',\n    value: function ImportDeclaration(path, _ref) {\n      var _this2 = this;\n\n      var opts = _ref.opts;\n      var node = path.node;\n\n      // path maybe removed by prev instances.\n\n      if (!node) return;\n\n      var value = node.source.value;\n\n      var libraryName = this.libraryName;\n      var types = this.types;\n      if (value === libraryName) {\n        node.specifiers.forEach(function (spec) {\n          if (types.isImportSpecifier(spec)) {\n            _this2.specified[spec.local.name] = spec.imported.name;\n          } else {\n            _this2.libraryObjs[spec.local.name] = true;\n          }\n        });\n        path.remove();\n      }\n    }\n  }, {\n    key: 'CallExpression',\n    value: function CallExpression(path, _ref2) {\n      var _this3 = this;\n\n      var opts = _ref2.opts;\n      var node = path.node;\n      var file = path.hub.file;\n      var _node$callee = node.callee,\n          name = _node$callee.name,\n          object = _node$callee.object,\n          property = _node$callee.property;\n\n      var types = this.types;\n\n      if (types.isIdentifier(node.callee)) {\n        if (this.specified[name]) {\n          node.callee = this.importMethod(this.specified[name], file, opts);\n        }\n      }\n\n      node.arguments = node.arguments.map(function (arg) {\n        var argName = arg.name;\n\n        if (_this3.specified[argName] && path.scope.hasBinding(argName) && path.scope.getBinding(argName).path.type === 'ImportSpecifier') {\n          return _this3.importMethod(_this3.specified[argName], file, opts);\n        }\n        return arg;\n      });\n    }\n  }, {\n    key: 'MemberExpression',\n    value: function MemberExpression(path, _ref3) {\n      var opts = _ref3.opts;\n      var node = path.node;\n      var file = path.hub.file;\n\n      // multiple instance check.\n\n      if (!node.object || !node.object.name) return;\n\n      if (this.libraryObjs[node.object.name]) {\n        // antd.Button -> _Button\n        path.replaceWith(this.importMethod(node.property.name, file, opts));\n      } else if (this.specified[node.object.name]) {\n        node.object = this.importMethod(this.specified[node.object.name], file, opts);\n      }\n    }\n  }, {\n    key: 'Property',\n    value: function Property(path, _ref4) {\n      var opts = _ref4.opts;\n      var node = path.node;\n\n      this.buildDeclaratorHandler(node, 'value', path, opts);\n    }\n  }, {\n    key: 'VariableDeclarator',\n    value: function VariableDeclarator(path, _ref5) {\n      var opts = _ref5.opts;\n      var node = path.node;\n\n      this.buildDeclaratorHandler(node, 'init', path, opts);\n    }\n  }, {\n    key: 'LogicalExpression',\n    value: function LogicalExpression(path, _ref6) {\n      var opts = _ref6.opts;\n      var node = path.node;\n\n      this.buildExpressionHandler(node, ['left', 'right'], path, opts);\n    }\n  }, {\n    key: 'ConditionalExpression',\n    value: function ConditionalExpression(path, _ref7) {\n      var opts = _ref7.opts;\n      var node = path.node;\n\n      this.buildExpressionHandler(node, ['test', 'consequent', 'alternate'], path, opts);\n    }\n  }, {\n    key: 'IfStatement',\n    value: function IfStatement(path, _ref8) {\n      var opts = _ref8.opts;\n      var node = path.node;\n\n      this.buildExpressionHandler(node, ['test'], path, opts);\n      this.buildExpressionHandler(node.test, ['left', 'right'], path, opts);\n    }\n  }, {\n    key: 'ExpressionStatement',\n    value: function ExpressionStatement(path, _ref9) {\n      var opts = _ref9.opts;\n      var node = path.node;\n      var types = this.types;\n\n      if (types.isAssignmentExpression(node.expression)) {\n        this.buildExpressionHandler(node.expression, ['right'], path, opts);\n      }\n    }\n  }, {\n    key: 'ExportDefaultDeclaration',\n    value: function ExportDefaultDeclaration(path, _ref10) {\n      var opts = _ref10.opts;\n      var node = path.node;\n\n      this.buildExpressionHandler(node, ['declaration'], path, opts);\n    }\n  }]);\n\n  return Plugin;\n}();\n\nexports.default = Plugin;\n\n\nfunction camel2Dash(_str) {\n  var str = _str[0].toLowerCase() + _str.substr(1);\n  return str.replace(/([A-Z])/g, function camel2DashReplace($1) {\n    return '-' + $1.toLowerCase();\n  });\n}\n\nfunction camel2Underline(_str) {\n  var str = _str[0].toLowerCase() + _str.substr(1);\n  return str.replace(/([A-Z])/g, function ($1) {\n    return '_' + $1.toLowerCase();\n  });\n}\n\nfunction winPath(path) {\n  return path.replace(/\\\\/g, '/');\n}\nmodule.exports = exports['default'];"}